传输层： TCP协议 和 UDP协议；

TCP（流式套接字） 
	优点：有连接、 可靠->数据可靠（数据无重复到达、数据无丢失、数据无失序、数据无错误）
	缺点：效率比较低；
UDP（数据报套接字）
	特点：无连接（效率高）、不可靠(数据包丢失)；


网络编程基本概念：

1. socket：
	1） 通信接口，函数
	2） 特殊的文件描述符：可以先不同平台不同主机之间的数据交互；

2. ip地址
	用来标识所要通信的主机

3. 端口号
	用来标识主机当中所要访问的服务器进程；

4. 字节序
	解决不同平台数据通信的准确性；	

TCP通信流程：

函数接口：API
1. socket
#include <sys/types.h>          /* See NOTES */
#include <sys/socket.h>

int socket(int domain, int type, int protocol);
功能：创建一个socket套接字文件描述符；
参数：
domain：socket套接字文件描述符的作用范围；
	AF_UNIX, AF_LOCAL   Local communication              unix(7)
       	AF_INET             IPv4 Internet protocols          ip(7)
       	AF_INET6            IPv6 Internet protocols          ipv6(7)
type：套接字的类型
	SOCK_STREAM：	流式套接字，TCP协议
	SOCK_DGRAM：	数据报套接字， UDP协议
	SOCK_RAM:	原始套接字，	
protocol：协议选项，默认为0，在原始套接字的时候，可以选择其他值；

返回值：
	成功返回套接字文件描述符，失败返回-1；


2. bind

       #include <sys/types.h>          /* See NOTES */
       #include <sys/socket.h>

       int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
功能：设置服务器的ip地址和端口号
参数：
	sockfd：套接字文件描述符；
	addr：
	通用地址结构：
	struct sockaddr {
               sa_family_t sa_family;
               char        sa_data[14];
           }
	专用地址结构
	struct sockaddr_in {
               sa_family_t    sin_family; /* address family: AF_INET */
               in_port_t      sin_port;   /* port in network byte order */
               struct in_addr sin_addr;   /* internet address */
           };

           /* Internet address. */
           struct in_addr {
               uint32_t       s_addr;     /* address in network byte order */
           };
	addlen：结构体的大小
返回值：成功返回0， 失败返回-1；

3. listen
int listen(int sockfd, int backlog);
功能：启动监听（将listenfd设置为被动套接字）；
参数：	sockfd：通信套接字；
	backlog：请求队列的大小；
返回值：成功返回0， 失败返回-1；


4. accept
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);


5. connect

int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

067351