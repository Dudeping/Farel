//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FAR.EL.WinApp.OrderServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ELResult", Namespace="http://schemas.datacontract.org/2004/07/FAR.EL.Common")]
    [System.SerializableAttribute()]
    public partial class ELResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrderServiceReference.IOrderService")]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Order", ReplyAction="http://tempuri.org/IOrderService/OrderResponse")]
        FAR.EL.WinApp.OrderServiceReference.ELResult Order(FAR.EL.Models.OrderModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Order", ReplyAction="http://tempuri.org/IOrderService/OrderResponse")]
        System.Threading.Tasks.Task<FAR.EL.WinApp.OrderServiceReference.ELResult> OrderAsync(FAR.EL.Models.OrderModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetLogs", ReplyAction="http://tempuri.org/IOrderService/GetLogsResponse")]
        FAR.EL.Models.LogAndTaskModel[] GetLogs(string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetLogs", ReplyAction="http://tempuri.org/IOrderService/GetLogsResponse")]
        System.Threading.Tasks.Task<FAR.EL.Models.LogAndTaskModel[]> GetLogsAsync(string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Getasks", ReplyAction="http://tempuri.org/IOrderService/GetasksResponse")]
        FAR.EL.Models.LogAndTaskModel[] Getasks(string did);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Getasks", ReplyAction="http://tempuri.org/IOrderService/GetasksResponse")]
        System.Threading.Tasks.Task<FAR.EL.Models.LogAndTaskModel[]> GetasksAsync(string did);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetRep", ReplyAction="http://tempuri.org/IOrderService/GetRepResponse")]
        FAR.EL.Models.GetRepModel GetRep(string rid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetRep", ReplyAction="http://tempuri.org/IOrderService/GetRepResponse")]
        System.Threading.Tasks.Task<FAR.EL.Models.GetRepModel> GetRepAsync(string rid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetPe", ReplyAction="http://tempuri.org/IOrderService/GetPeResponse")]
        FAR.EL.Models.GetPeModel GetPe(string pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetPe", ReplyAction="http://tempuri.org/IOrderService/GetPeResponse")]
        System.Threading.Tasks.Task<FAR.EL.Models.GetPeModel> GetPeAsync(string pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Pet", ReplyAction="http://tempuri.org/IOrderService/PetResponse")]
        FAR.EL.WinApp.OrderServiceReference.ELResult Pet(string pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/Pet", ReplyAction="http://tempuri.org/IOrderService/PetResponse")]
        System.Threading.Tasks.Task<FAR.EL.WinApp.OrderServiceReference.ELResult> PetAsync(string pid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : FAR.EL.WinApp.OrderServiceReference.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<FAR.EL.WinApp.OrderServiceReference.IOrderService>, FAR.EL.WinApp.OrderServiceReference.IOrderService {
        
        public OrderServiceClient() {
        }
        
        public OrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FAR.EL.WinApp.OrderServiceReference.ELResult Order(FAR.EL.Models.OrderModel model) {
            return base.Channel.Order(model);
        }
        
        public System.Threading.Tasks.Task<FAR.EL.WinApp.OrderServiceReference.ELResult> OrderAsync(FAR.EL.Models.OrderModel model) {
            return base.Channel.OrderAsync(model);
        }
        
        public FAR.EL.Models.LogAndTaskModel[] GetLogs(string uid) {
            return base.Channel.GetLogs(uid);
        }
        
        public System.Threading.Tasks.Task<FAR.EL.Models.LogAndTaskModel[]> GetLogsAsync(string uid) {
            return base.Channel.GetLogsAsync(uid);
        }
        
        public FAR.EL.Models.LogAndTaskModel[] Getasks(string did) {
            return base.Channel.Getasks(did);
        }
        
        public System.Threading.Tasks.Task<FAR.EL.Models.LogAndTaskModel[]> GetasksAsync(string did) {
            return base.Channel.GetasksAsync(did);
        }
        
        public FAR.EL.Models.GetRepModel GetRep(string rid) {
            return base.Channel.GetRep(rid);
        }
        
        public System.Threading.Tasks.Task<FAR.EL.Models.GetRepModel> GetRepAsync(string rid) {
            return base.Channel.GetRepAsync(rid);
        }
        
        public FAR.EL.Models.GetPeModel GetPe(string pid) {
            return base.Channel.GetPe(pid);
        }
        
        public System.Threading.Tasks.Task<FAR.EL.Models.GetPeModel> GetPeAsync(string pid) {
            return base.Channel.GetPeAsync(pid);
        }
        
        public FAR.EL.WinApp.OrderServiceReference.ELResult Pet(string pid) {
            return base.Channel.Pet(pid);
        }
        
        public System.Threading.Tasks.Task<FAR.EL.WinApp.OrderServiceReference.ELResult> PetAsync(string pid) {
            return base.Channel.PetAsync(pid);
        }
    }
}
